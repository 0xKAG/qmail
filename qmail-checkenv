#!/usr/bin/env python3
# vim: et sw=4 ts=4:

"""
qmail-checkenv: Called by qmail checkenv patch.  Called with mail from and
rcpt to as args, and various envirionment variables set.

Requires pyspf>=2.0.12 be installed.
"""

import io
import os
import sys

import spf

spf.MAX_LOOKUP = 40

HARDFAIL = 100 # from checkenv patch
SOFTERROR = 111 # from man qmail-command; convention

# TODO add extra exit codes to checkenv

def out(s):
    print('qmail-checkenv: %s' % s, file=sys.stderr)

def main():
    sys.stdout.flush()
    sys.stdout.close()
    os.dup2(2, 1)
    # sys.stdout = io.TextIOWrapper(os.fdopen(1, 'wb', 0), line_buffering=True)
    sys.stdout = sys.stderr

    # the checkenv patch passes these

    mailfrom = sys.argv[1]
    rcptto = sys.argv[2]

    # remote ip of client; set by tcpserver

    remoteip = os.environ.get('TCPREMOTEIP', None)

    # remote hostname of the client; set by tcpserver

    remotehost = os.environ.get('TCPREMOTEHOST', None)

    # local port of server -- 25 or 587

    localport = os.environ.get('TCPLOCALPORT', None)

    # with the SMTP AUTH patch, this will be the authenticated username

    remoteinfo = os.environ.get('TCPREMOTEINFO', None)

    # set by tcpserver or by the SMTP AUTH patch; its presence means that
    # relaying is ok

    relayclient = os.environ.get('RELAYCLIENT', None)

    # set by tcpserver; its presence means that rblsmtpd was bypassed

    rblsmtpd = os.environ.get('RBLSMTPD', None)

    # set by tcpserver in my environment, when configured to do so

    spfpass = os.environ.get('SPFPASS', None)

    # set by qmail-smtpd run; its presence means that SMTP AUTH is active and
    # its contents is to be interpretted per that man page

    smtpauth = os.environ.get('SMTPAUTH', None)

    # set by qmail-smtpd patch we've made; this is the arg to HELO/EHLO

    smtphelo = os.environ.get('SMTPHELO', None)

    def result(code, *args, **kwargs):
        args_str = ' '.join(['%r' % x for x in args])
        kwargs_str = ' '.join(['%s=%r' % (x, y) for x, y in kwargs.items()])

        out(
            ('%d mailfrom=%s rcptto=%s smtphelo=%s remoteip=%s remotehost=%s '
             'remoteinfo=%r relayclient=%r rblsmtpd=%r spfpass=%r '
             'smtpauth=%r %s%scode=%s') %
            (
                os.getppid(),
                mailfrom or repr(''),
                rcptto or repr(''),
                smtphelo,
                remoteip,
                remotehost,
                remoteinfo,
                relayclient,
                rblsmtpd,
                spfpass,
                smtpauth,
                args_str + ' ' if args_str else '',
                kwargs_str + ' ' if kwargs_str else '',
                code
            )
        )

        return code

    try:
        # bypass if relayclient

        if relayclient is not None:
            # TODO -- should still check "rcpt to" if its a local domain?
            return result(0, reason='bypassing per relayclient')

        # check "rcpt to" delivery

        # NOTE -- this is currently handled by realrcptto patch in my
        # envirionment

        # TODO -- use cvm-qmail? or otherwise replace realrcptto patch?

        # check spf

        h = smtphelo or tcpremotehost

        spfstatus, spfmessage = spf.check2(i=remoteip, s=mailfrom, h=h)

        # ... spfstatus is 'pass', 'fail', 'neutral', 'softfail', 'permerror',
        # 'temperror'.

        # ... for now, ignore softfail but fail with a temporary error for
        # hard spf failure ... so perhaps the message will be retried after
        # the sender fixes the issue --- TODO eventually change this to
        # HARDFAIL

        if spfstatus != 'pass' and spfpass is not None:
            result(0, spfstatus=spfstatus, spfmessage=spfmessage,
                   spfpass='passing because spfpass is set')
            # FALLTHROUGH
        elif spfstatus == 'fail':
            return result(SOFTERROR, spfstatus=spfstatus,
                          spfmessage=spfmessage)
            # NOTREACHED
        else:
            result(0, spfstatus=spfstatus, spfmessage=spfmessage)
            # FALLTHROUGH

        # greylisting

        # TODO -- implement greylisting?  replace qmail-greyd?

        return 0
    except Exception as e:
        return result(SOFTERROR, exception=str(e))

if __name__ == '__main__':
    sys.exit(main())

